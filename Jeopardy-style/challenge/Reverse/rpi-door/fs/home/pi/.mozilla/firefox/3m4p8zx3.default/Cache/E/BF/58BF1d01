<style type="text/css">
#snippetContainer div.snippet img.icon {
  margin: -0.75em 1em 0 0;
  float: left;
}

 
   .snippet {
       position: relative;
   }

   .snippet .icon {
       position: absolute;
       right: 400px;
       top: 5px;
       height: 50px;
   }

   .snippet p {
       display: table-cell;
       height: 40px;
       padding-left: 80px;
       vertical-align: middle;
       width: 400px;
   }
 

 
</style>
<script type="text/javascript">
//<![CDATA[
  // Generated on 2016-09-23 09:15:25.557391
  // Included snippets:

  //  - 5722

  var ABOUTHOME_SNIPPETS = JSON.parse('[{\u0022code\u0022: \u0022\u003Cdiv data\u002Dsnippet\u002Did\u003D\u005C\u00225722\u005C\u0022 data\u002Dweight\u003D\u005C\u0022100\u005C\u0022 data\u002Dcampaign\u003D\u005C\u0022\u005C\u0022 class\u003D\u005C\u0022snippet\u002Dmetadata\u005C\u0022\u003E\u005Cn\u003Cstyle\u003E\u005Cndiv.switch#brandLogo {\u005Cn   background\u002Dsize: 192px auto\u003B\u005Cn}\u005Cn\u005Cn.switch#brandLogo {\u005Cn   height: 192px\u003B\u005Cn   width: 192px\u003B\u005Cn}\u005Cn\u005Cn#snippetContainer div.snippet {\u005Cn   margin: 10px 5px\u003B\u005Cn}\u005Cn\u005Cn#snippetContainer div.snippet img.icon {\u005Cn    margin: 5px 8px 5px 5px\u003B\u005Cn    float: none\u003B\u005Cn}\u005Cn\u005Cn.snippet p {\u005Cn    padding\u002Dleft: 0\u003B\u005Cn}\u005Cn\u005Cn.snippet .icon {\u005Cn    position: relative\u003B\u005Cn    right: 0\u003B\u005Cn    top: 0\u003B\u005Cn    display: inline\u002Dblock\u003B\u005Cn    height: auto\u003B\u005Cn    max\u002Dheight: 64px\u003B\u005Cn    vertical\u002Dalign: middle\u003B\u005Cn}\u005Cn\u005Cn\u005Cn\u005Cn\u005Cn\u005Cn .snippet .display\u002Ditem {\u005Cn     display: table\u002Dcell\u003B\u005Cn     vertical\u002Dalign: middle\u003B\u005Cn }\u005Cn .snippet .display\u002Dcontainer {\u005Cn     display: table\u003B\u005Cn }\u005Cn\u005Cn .button\u002Dlink {\u005Cn     white\u002Dspace: nowrap\u003B\u005Cn     margin: 5px\u003B\u005Cn     background: #D3D9DD\u003B\u005Cn     color: #000\u003B\u005Cn     font\u002Dsize: 16px\u003B\u005Cn     padding: 5px 13px\u003B\u005Cn     border\u002Dradius: 6px\u003B\u005Cn }\u005Cn\u005Cn .button\u002Dlink:hover {\u005Cn     background: #2B9EEF\u003B\u005Cn     color: #FFF\u003B\u005Cn }\u005Cn\u005Cn \u005Cn\u005Cn\u003C/style\u003E\u005Cn\u005Cn  \u003Cdiv class\u003D\u005C\u0022snippet\u005C\u0022 id\u003D\u005C\u0022snippet\u005C\u0022\u003E\u005Cn    \u005Cn        \u003Cdiv class\u003D\u005C\u0022display\u002Dcontainer\u005C\u0022\u003E\u005Cn          \u003Cdiv class\u003D\u005C\u0022display\u002Ditem\u005C\u0022\u003E\u005Cn            \u005Cn              \u003Ca href\u003D\u005C\u0022https://www.mozilla.org/en\u002DUS/firefox/nightly/all/\u005C\u0022\u003E\u005Cn            \u005Cn                  \u003Cimg class\u003D\u005C\u0022icon\u005C\u0022 src\u003D\u005C\u0022data:image/png\u003Bbase64,iVBORw0KGgoAAAANSUhEUgAAACgAAAAyCAYAAAAus5mQAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoTWFjaW50b3NoKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpDQUFCQkM0MjE4QjExMUUzQkYzQzg5MTlEQUVCNDlBNiIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpDQUFCQkM0MzE4QjExMUUzQkYzQzg5MTlEQUVCNDlBNiI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkNBQUJCQzQwMThCMTExRTNCRjNDODkxOURBRUI0OUE2IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNBQUJCQzQxMThCMTExRTNCRjNDODkxOURBRUI0OUE2Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+SH8UIwAACidJREFUeNq8Wd1v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\u003D\u005C\u0022 /\u003E\u005Cn            \u005Cn              \u003C/a\u003E\u005Cn            \u005Cn          \u003C/div\u003E\u005Cn\u005Cn          \u003Cp class\u003D\u005C\u0022display\u002Ditem\u005C\u0022\u003EFrench, German, Russian, Japanese, Spanish\u005Cu2026 Firefox Nightly is available in \u003Cstrong\u003Emany\u003C/strong\u003E languages, \u003Ca href\u003D\u005C\u0022https://www.mozilla.org/en\u002DUS/firefox/nightly/all/\u005C\u0022\u003Eget a version that speaks yours!\u003C/a\u003E\u003C/p\u003E\u005Cn\u005Cn          \u005Cn        \u003C/div\u003E\u005Cn    \u005Cn\u005Cn    \u005Cn  \u003C/div\u003E\u005Cn\u005Cn\u003Cscript type\u003D\u005C\u0022text/javascript\u005C\u0022\u003E\u005Cn //\u003C![CDATA[\u005Cn (function() {\u005Cn     var snippet \u003D document.getElementById(\u0027snippet\u0027)\u003B\u005Cn\u005Cn     snippet.addEventListener(\u0027show_snippet\u0027, function () {\u005Cn         var overlay \u003D document.getElementById(\u0027block\u002Dsnippet\u002Doverlay\u0027)\u003B\u005Cn         var xbuttons \u003D document.querySelectorAll(\u0027.block\u002Dsnippet\u002Dbutton\u0027)\u003B\u005Cn\u005Cn         \u005Cn\u005Cn         \u005Cn\u005Cn         \u005Cn     })\u003B\u005Cn })()\u003B\u005Cn //]]\u003E\u005Cn\u003C/script\u003E\u003C/div\u003E\u0022, \u0022campaign\u0022: \u0022\u0022, \u0022weight\u0022: 100, \u0022countries\u0022: [], \u0022exclude_from_search_engines\u0022: [], \u0022client_options\u0022: {\u0022version_lower_bound\u0022: \u0022any\u0022, \u0022is_default_browser\u0022: \u0022any\u0022, \u0022version_upper_bound\u0022: \u0022any\u0022, \u0022has_testpilot\u0022: \u0022any\u0022, \u0022has_fxaccount\u0022: \u0022any\u0022}, \u0022id\u0022: 5722}]');
  var CURRENT_RELEASE = 48;

  'use strict';

var SNIPPET_METRICS_SAMPLE_RATE = 0.1;
var SNIPPET_METRICS_URL = 'https://snippets-stats.eu-west.moz.works/foo';
var ABOUTHOME_SHOWN_SNIPPET = null;
var USER_COUNTRY = null;
var GEO_CACHE_DURATION = 1000 * 60 * 60 * 24 * 30; // 30 days

// Start MozUITour
// Copy from https://hg.mozilla.org/mozilla-central/file/tip/browser/components/uitour/UITour-lib.js
if (typeof Mozilla == 'undefined') {
    var Mozilla = {};
}

if (typeof Mozilla.UITour == 'undefined') {
    Mozilla.UITour = {};
}

function _sendEvent(action, data) {
    var event = new CustomEvent('mozUITour', {
        bubbles: true,
        detail: {
            action: action,
            data: data || {}
        }
    });

    document.dispatchEvent(event);
}

function _generateCallbackID() {
    return Math.random().toString(36).replace(/[^a-z]+/g, '');
}

function _waitForCallback(callback) {
    var id = _generateCallbackID();

    function listener(event) {
        if (typeof event.detail != 'object')
            return;
        if (event.detail.callbackID != id)
            return;

        document.removeEventListener('mozUITourResponse', listener);
        callback(event.detail.data);
    }
    document.addEventListener('mozUITourResponse', listener);

    return id;
}

Mozilla.UITour.showHighlight = function(target, effect) {
    _sendEvent('showHighlight', {
        target: target,
        effect: effect
    });
};

Mozilla.UITour.hideHighlight = function() {
    _sendEvent('hideHighlight');
};

Mozilla.UITour.showMenu = function(name, callback) {
    var showCallbackID;
    if (callback)
        showCallbackID = _waitForCallback(callback);

    _sendEvent('showMenu', {
        name: name,
        showCallbackID: showCallbackID
    });
};

Mozilla.UITour.hideMenu = function(name) {
    _sendEvent('hideMenu', {
        name: name
    });
};

Mozilla.UITour.getConfiguration = function(configName, callback) {
    _sendEvent('getConfiguration', {
        callbackID: _waitForCallback(callback),
        configuration: configName,
    });
};

Mozilla.UITour.setConfiguration = function(configName, configValue) {
    _sendEvent('setConfiguration', {
        configuration: configName,
        value: configValue
    });
};
// End MozUITour


(function(showDefaultSnippets) {
    'use strict';

    // showDefaultSnippets polyfill, available in about:home v4
    if (typeof showDefaultSnippets !== 'function') {
        showDefaultSnippets = function() {
            localStorage.snippets = '';
            showSnippets();
        };
    }

    // gSnippetsMap polyfill, available in Firefox 22 and above.
    var gSnippetsMap = null;
    if (supportsLocalStorage()) {
        // localStorage is available, so we wrap it with gSnippetsMap.
        gSnippetsMap = {
            set: function(key, value) {
                localStorage[key] = value;
            },
            get: function(key) {
                return localStorage[key];
            }
        };
        window.gSnippetsMap = gSnippetsMap;
    } else {
        // localStorage isn't available, use gSnippetsMap (backed by IndexedDB).
        gSnippetsMap = window.gSnippetsMap;
    }


    var show_snippet = null;
    if (ABOUTHOME_SNIPPETS.length > 0) {
        show_snippet = chooseSnippet(ABOUTHOME_SNIPPETS);
    }

    if (show_snippet) {
        ABOUTHOME_SHOWN_SNIPPET = show_snippet;

        // Inject the snippet onto the page.
        var snippetContainer = document.createElement('div');
        snippetContainer.innerHTML = show_snippet.code;
        document.getElementById('snippets').appendChild(snippetContainer);
        activateScriptTags(snippetContainer);

        try {
            activateSnippetsButtonClick(show_snippet);
        } catch (err) {
            // Do nothing, most likely a newer version of Firefox w/o
            // activateSnippetsButtonClick
        }

        // By the time show_snippet event reaches #snippets the snippet
        // will have finished initializing and altering the DOM. It's the
        // time to modifyLinks() and addSnippetBlockLinks().
        var snippets = document.getElementById('snippets');
        snippets.addEventListener('show_snippet', function(event) {
            var topSection = document.getElementById('topSection');
            // Add sample rate and snippet ID to currently displayed links.
            var parameters = ('sample_rate=' + SNIPPET_METRICS_SAMPLE_RATE + '&snippet_name=' +
                              ABOUTHOME_SHOWN_SNIPPET.id);
            modifyLinks(topSection.querySelectorAll('a'), parameters);
            addSnippetBlockLinks(topSection.querySelectorAll('.block-snippet-button'));
            keypressIsMine(snippetContainer.querySelector('.snippet'));
            sendImpression();
        });

        // Trigger show_snippet event
        var evt = document.createEvent('Event');
        evt.initEvent('show_snippet', true, true);
        snippetContainer.querySelector('.snippet').dispatchEvent(evt);
    } else {
        showDefaultSnippets();
    }

    // Update FxAccount Status
    updateFxAccountStatus();

    // Update Default Browser Status
    updateDefaultBrowserStatus();

    // Update Selected Search Engine
    updateSelectedSearchEngine();

    // Fetch user country if we don't have it.
    if (!haveUserCountry()) {
        downloadUserCountry();
    }

    
    // Choose which snippet to display to the user based on various factors,
    // such as which country they are in.
    function chooseSnippet(snippets) {
        USER_COUNTRY = getUserCountry();
        if (USER_COUNTRY) {
            snippets = snippets.filter(
                function(snippet) {
                    var countries = snippet.countries;
                    if (countries.length && countries.indexOf(USER_COUNTRY) === -1) {
                        return false;
                    }
                    return true;
                }
            );
        }
        else {
            // If we don't have the user's country, remove all geolocated snippets.
            // Bug 1140476
            snippets = snippets.filter(
                function(snippet) {
                    return snippet.countries.length === 0;
                }
            )
        }

        // Filter Snippets based on the has_fxaccount attribute.
        var has_fxaccount = gSnippetsMap.get('fxaccount');
        if (has_fxaccount === true) {
            snippets = snippets.filter(
                function(snippet) {
                    return (snippet.client_options.has_fxaccount == 'yes' ||
                            snippet.client_options.has_fxaccount == 'any');
                }
            )
        } else if (has_fxaccount === false) {
            snippets = snippets.filter(
                function(snippet) {
                    return (snippet.client_options.has_fxaccount == 'no' ||
                            snippet.client_options.has_fxaccount == 'any');
                }
            );
        } else {
            snippets = snippets.filter(
                function(snippet) {
                    return (snippet.client_options.has_fxaccount == 'any');
                }
            );
        }

        // Filter Snippets based on TestPilot addon existence.
        var has_testpilot = Boolean(window.navigator.testpilotAddon);
        if (has_testpilot === true) {
            snippets = snippets.filter(
                function(snippet) {
                    return (snippet.client_options.has_testpilot == 'yes' ||
                            snippet.client_options.has_testpilot == 'any');
                }
            )
        } else {
            snippets = snippets.filter(
                function(snippet) {
                    return (snippet.client_options.has_testpilot == 'no' ||
                            snippet.client_options.has_testpilot == 'any');
                }
            );
        }

        // Filter Snippets based on whether Firefox is the default browser or now.
        var is_default_browser = gSnippetsMap.get('is_default_browser');
        if (is_default_browser === true || is_default_browser === undefined) {
            snippets = snippets.filter(
                function(snippet) {
                    return (snippet.client_options.is_default_browser == 'yes' ||
                            snippet.client_options.is_default_browser == 'any');
                }
            )
        } else {
            snippets = snippets.filter(
                function(snippet) {
                    return (snippet.client_options.is_default_browser == 'no' ||
                            snippet.client_options.is_default_browser == 'any');
                }
            );
        }

        // Exclude snippets from search providers.
        var searchProvider = gSnippetsMap.get('selectedSearchEngine');
        if (searchProvider) {
            snippets = snippets.filter(
                function(snippet) {
                    var excludeFromSearchEngines = snippet.exclude_from_search_engines;
                    if (excludeFromSearchEngines.length && excludeFromSearchEngines.indexOf(searchProvider) !== -1) {
                        return false;
                    }
                    return true;
                }
            );
        }

        // Filter Snippets based on TestPilot addon existence.
        var has_testpilot = Boolean(window.navigator.testpilotAddon);
        if (has_testpilot === true) {
            snippets = snippets.filter(
                function(snippet) {
                    return (snippet.client_options.has_testpilot == 'yes' ||
                            snippet.client_options.has_testpilot == 'any');
                }
            )
        } else {
            snippets = snippets.filter(
                function(snippet) {
                    return (snippet.client_options.has_testpilot == 'no' ||
                            snippet.client_options.has_testpilot == 'any');
                }
            );
        }

        // Filter based on Firefox version
        var userAgent = window.navigator.userAgent.match(/Firefox\/([0-9]+)\./);
        var firefox_version  = userAgent ? parseInt(userAgent[1]) : 0;
        if (firefox_version !== 0) {
            snippets = snippets.filter(
                function(snippet) {
                    var lower_bound = snippet.client_options.version_lower_bound;
                    var upper_bound = snippet.client_options.version_upper_bound;
                    if (lower_bound && lower_bound !== 'any') {
                        if (lower_bound === 'current_release') {
                            if (firefox_version !== CURRENT_RELEASE)
                                return false;
                        }
                        else {
                            if (firefox_version < lower_bound) {
                                return false;
                            }
                        }
                    }
                    if (upper_bound && upper_bound !== 'any') {
                        if (upper_bound === 'older_than_current_release') {
                            if (firefox_version >= CURRENT_RELEASE)
                                return false;
                        }
                        else {
                            if (firefox_version > upper_bound)
                                return false;
                        }
                    }
                    return true;
                });
        }

        // Exclude snippets in block list.
        var blockList = getBlockList();
        snippets = snippets.filter(
            function (snippet) {
                if (blockList.indexOf(snippet.id) === -1) {
                    return true;
                }
                return false;
            }
        );

        // Choose a random snippet from the snippets list.
        if (snippets && snippets.length) {
            var sum = 0;
            var number_of_snippets = snippets.length;
            for (var k = 0; k < number_of_snippets; k++) {
                sum += snippets[k].weight;
                snippets[k].weight = sum;
            }
            var random_number = Math.random() * sum;
            for (var k = 0; k < number_of_snippets; k++) {
                if (random_number < snippets[k].weight) {
                    return snippets[k];
                }
            }
        } else {
            return null;
        }
    }
    

    function updateFxAccountStatus() {
        var callback = function(result) {
            gSnippetsMap.set('fxaccount', result.setup);
        }
        var event = new CustomEvent(
            'mozUITour', {
                bubbles: true,
                detail: {
                    action:'getConfiguration',
                    data: {
                        configuration: 'sync',
                        callbackID: _waitForCallback(callback)
                    }
                }
            }
        );
        document.dispatchEvent(event);
    }

    function updateDefaultBrowserStatus() {
        var callback = function(result) {
            gSnippetsMap.set('is_default_browser', result.defaultBrowser);
        }
        var event = new CustomEvent(
            'mozUITour', {
                bubbles: true,
                detail: {
                    action:'getConfiguration',
                    data: {
                        configuration: 'appinfo',
                        callbackID: _waitForCallback(callback)
                    }
                }
            }
        );
        document.dispatchEvent(event);
    }

    function updateSelectedSearchEngine() {
        var callback = function(result) {
            gSnippetsMap.set('selectedSearchEngine', result.searchEngineIdentifier);
        }
        var event = new CustomEvent(
            'mozUITour', {
                bubbles: true,
                detail: {
                    action:'getConfiguration',
                    data: {
                        configuration: 'selectedSearchEngine',
                        callbackID: _waitForCallback(callback)
                    }
                }
            }
        );
        document.dispatchEvent(event);
    }

    // Check whether we have the user's country stored and if it is still valid.
    function haveUserCountry() {
        // Check if there's an existing country code to use.
        if (gSnippetsMap.get('geoCountry')) {
            // Make sure we have a valid lastUpdated date.
            var lastUpdated = Date.parse(gSnippetsMap.get('geoLastUpdated'));
            if (lastUpdated) {
                // Make sure that it is past the lastUpdated date.
                var now = new Date();
                if (now < lastUpdated + GEO_CACHE_DURATION) {
                    return true;
                }
            }
        }

        return false;
    }

    function getUserCountry() {
        if (haveUserCountry()) {
            return gSnippetsMap.get('geoCountry').toLowerCase();
        } else {
            return null;
        }
    }

    // Download the user's country using the geolocation service.
    // Please do not directly use this code or Snippets key.
    // Contact MLS team for your own credentials.
    // https://location.services.mozilla.com/contact
    function downloadUserCountry() {
        var GEO_URL = "https://location.services.mozilla.com/v1/country?key=fff72d56-b040-4205-9a11-82feda9d83a3";
        var request = new XMLHttpRequest();
        request.timeout = 60000;
        request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
                var country_data = JSON.parse(request.responseText);

                try {
                    gSnippetsMap.set('geoCountry', country_data.country_code);
                    gSnippetsMap.set('geoLastUpdated', new Date());
                } catch (e) {
                    // Most likely failed to load Data file. Continue on without us,
                    // we'll try again next time.
                }
            }
        };
        request.open('GET', GEO_URL, true);
        request.send();
    }

    // Notifies stats server that the given snippet ID
    // was shown. No personally-identifiable information
    // is sent.
    function sendImpression() {
        sendMetric('impression');
    }

    // Modifies the given links to include the specified GET parameters.
    function modifyLinks(links, parameters) {
        for (var k = 0, len = links.length; k < len; k++) {
            var link = links[k];
            var delimeter = (link.href.indexOf('?') !== -1 ? '&' : '?');

            // Pull the fragment off of the link
            var fragment_position = link.href.indexOf('#');
            if (fragment_position === -1) {
                fragment_position = link.href.length;
            }

            var href = link.href.substring(0, fragment_position);
            var fragment = link.href.substring(fragment_position);

            link.href = href + delimeter + parameters + fragment;
        }
    }

    // Add links to buttons that block snippets.
    function addSnippetBlockLinks(elements) {
        var snippet_id = ABOUTHOME_SHOWN_SNIPPET.id;
        var blockSnippet = function (event) {
            event.preventDefault();
            event.stopPropagation();

            addToBlockList(snippet_id);

            // Waiting for 500ms before reloading the page after user blocks a snippet,
            // will allow the IndexedDB more time to complete its transaction. While
            // this is an imperfect non-deterministic solution it will fix the issue
            // for most of the users. Ideally we would create our own
            // connection to the iDB and ensure that the write completes
            // before we reload the page. Bug 1236090.
            function reloadWindow() {
                window.location.reload();
            }
            sendMetric('snippet-blocked', function() { setTimeout(reloadWindow, 500); })
        };

        for (var k = 0; k < elements.length; k++) {
            var button = elements[k];
            button.addEventListener('click', blockSnippet);
        }
    }

    // Bug 1238092. Got fixed in Fx45. We can drop this when Fx44
    // usage drops significantly.
    function keypressIsMine(snippet) {
        snippet.addEventListener('keypress', function(event) {
            var tagName = event.target.tagName.toLowerCase();
            if (tagName === 'input' || tagName === 'select') {
                event.stopPropagation();
            }
        });
    }

    // Check for localStorage support. Copied from Modernizr.
    function supportsLocalStorage() {
        var s = 'snippets-test';
        try {
            localStorage.setItem(s, s);
            localStorage.removeItem(s);
            return true;
        } catch(e) {
            return false;
        }
    }

    // Scripts injected by innerHTML are inactive, so we have to relocate them
    // through DOM manipulation to activate their contents.
    // (Adapted from http://mxr.mozilla.org/mozilla-central/source/browser/base/content/abouthome/aboutHome.js)
    function activateScriptTags(element) {
       Array.forEach(element.getElementsByTagName('script'), function(elt) {
           var relocatedScript = document.createElement('script');
           relocatedScript.type = 'text/javascript;version=1.8';
           relocatedScript.text = elt.text;
           elt.parentNode.replaceChild(relocatedScript, elt);
       });
    }

    // Listen for clicks on links, send metrics and handle
    // about:account custom links.
    var topSection = document.getElementById('topSection');
    topSection.addEventListener('click', function(event) {
        var target = event.target;
        while (target.tagName && target.tagName.toLowerCase() !== 'a') {
            // Do not track clicks outside topSection.
            if (target.id === 'topSection') {
                return;
            }
            target = target.parentNode;
        }

        // Count snippet clicks.
        if (target.dataset.eventCounted !== 'true') {
            target.dataset.eventCounted = 'true';
            // Fetch custom metric or default to 'click'
            var metric = target.dataset.metric || 'click';
            // If user is not opening a new tab, preventDefault action.
            if (target.href && (event.button === 0 && !(event.metaKey || event.ctrlKey))) {
                event.preventDefault();
                var callback = function() {
                    target.click();
                }
            }
            sendMetric(metric, callback, target.href);
        }

        // Handle about:accounts clicks.
        if (target.href && target.href.indexOf('about:accounts') === 0) {
            var snippet_id = ABOUTHOME_SHOWN_SNIPPET.id;
            var metric = snippet_id + '-about-accounts-click';
            var fire_event = function() {
                var event = new CustomEvent(
                    'mozUITour',
                    { bubbles: true, detail: { action:'showFirefoxAccounts', data: {}}}
                );
                document.dispatchEvent(event);
            };
            sendMetric(metric, fire_event, target.href);
        }
    }, false);


})(window.showDefaultSnippets);

// Send impressions and other interactions to the service
// If no parameter is entered, quit function
function sendMetric(metric, callback, href) {
    
    
      if ((Math.random() > SNIPPET_METRICS_SAMPLE_RATE) || (!metric)) {
          if (callback) {
              callback();
          }
          return;
      }

      var locale = 'en-US';
      var userCountry = USER_COUNTRY || '';
      var campaign = ABOUTHOME_SHOWN_SNIPPET.campaign;
      var snippet_id = ABOUTHOME_SHOWN_SNIPPET.id;

      var url = (SNIPPET_METRICS_URL + '?snippet_name=' + snippet_id +
                 '&locale=' + locale + '&country=' + userCountry +
                 '&metric=' + metric + '&campaign=' + campaign);

      if (href) {
          url = url + "&href=" + escape(href);
      }

      var request = new XMLHttpRequest();
      request.open('GET', url);
      if (callback) {
          request.addEventListener('loadend', callback, false);
      }
      request.send();
      return request;
    
}

function popFromBlockList(snippetID) {
    var blockList = getBlockList();
    var item = blockList.pop(snippetID);
    gSnippetsMap.set('blockList', blockList);
    return item;
}

function addToBlockList(snippetID) {
    var blockList = getBlockList();
    snippetID = parseInt(snippetID, 10);
    if (blockList.indexOf(snippetID) === -1) {
        blockList = [snippetID].concat(blockList);
        gSnippetsMap.set('blockList', blockList);
    }
}

function getBlockList() {
    if (gSnippetsMap.get('blockList') === undefined) {
        gSnippetsMap.set('blockList', []);
    }
    return gSnippetsMap.get('blockList');
}

//]]>
</script>